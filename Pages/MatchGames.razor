@page "/MatchGame"

@using System.Timers
@using ProyectoFinalAP2
@using ProyectoFinalAP2.BLL
@inject IToastService Toast

<style>
    .container {
        width: 600px;
        
    }

    button {
        width: 70px;
        height: 70px;
        font-size: 50px;
    }

    body, html {
        height: 90vh;
        background-image: url(https://i.pinimg.com/originals/29/b0/a9/29b0a90fee3d71ac1e3a2696616d2593.jpg);
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
    }

    .bg-black {
        background-color: rgba(0, 0, 0, 0.03);
    }

    .bg-w {
        background-color: rgba(255, 255, 255, 0.1);
    }


   
</style>

<EditForm Model="game">
    <DataAnnotationsValidator />
    <body>

        <div class="card-group">
            <div class="container border ">

                <br>
                <div class="form-group row">
                    <div class="col-form">
                        <label class="form-label"><b>Jugador</b></label>
                        <div class="col input-group">
                            <InputText @bind-Value="JugadorTextBox" class="form-control" placeholder="Nombre De Jugador." />
                        </div>
                    </div>

                    <ValidationMessage For="@(() => JugadorTextBox)" />
                </div>


                <div class="form-group row">
                    <div class="col form">
                        <label class="form-label"><b>Dificultad</b></label>
                        <select @bind-value="DificultadIndexSelect" @bind-value:event="oninput" class="custom-select">
                            <option value="1">4X3</option>
                            <option value="2">4X5</option>
                            <option value="3">4X8</option>
                        </select>
                        @if (DificultadIndexSelect != 0)
                        {
                           
                        }
                    </div>


                </div> 
                
                    <div class="form group row ">
                        @for (var animalNumber = 0; animalNumber < mezclarEmoji.Count; animalNumber++)
                        {
                            var emoji = mezclarEmoji[animalNumber];
                            var uniqueDescription = $"Button #{animalNumber}";
                            <div class="border col-3 ">
                                 <button @onclick="@(() => ButtonClick(emoji, uniqueDescription))"
                                     type="button" class="btn btn-outline-dark; active ">

                                    <h1>@emoji</h1>
                                    
                                 </button>
                            </div>
                        }
                    </div>

                
                
                <div class="input"

                     <div class="form-control-range" >
                         
                          <h3><b>Parejas encontradas: </b>@parejasEncontradas / @cantidadEmoji</h3>
                          <h3><b>Tiempo: </b>@timeDisplay</h3>
                          <button style="margin-inline-start: 70px;" class="btn btn-primary w-auto" @onclick="@(() => RegistrarResultadosButtonClick())"><i class="oi oi-account-login " style="transform:rotate(90deg)" />Guardar Resultados</button>
                         
                     </div>
        


                </div>
            
            </div>
        </div>
        
    </body>
</EditForm>


@code {
    int EstiloIndexSelect = 1;
    int DificultadIndexSelect = 1;
    int cantidadEmoji;
    private ProyectoFinalAP2.Models.MatchGame game = new ProyectoFinalAP2.Models.MatchGame();
    string CriterioTextBox = "";
    string JugadorTextBox = "";

    int IndexConsulta = -1;
    public List<ProyectoFinalAP2.Models.MatchGame> Filtro { get; set; }

    List<ProyectoFinalAP2.Models.MatchGame> jugadas = new List<ProyectoFinalAP2.Models.MatchGame>();
    List<string> mezclarEmoji = new List<string>();
    int parejasEncontradas = 0;
    Timer timer;
    int decimasSegundos = 0;
    string timeDisplay;
    string mensaje = string.Empty;

    bool cambio;

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Temporizador;
        jugadas = new List<ProyectoFinalAP2.Models.MatchGame>();

        CantidadEmoji();
        InicioJuego();
        
    }

    

    
    private void CantidadEmoji()
    {
        if (DificultadIndexSelect == 1)
        {
            cantidadEmoji = 6;
        }
        if (DificultadIndexSelect == 2)
        {
            cantidadEmoji = 10;
        }
        if (DificultadIndexSelect == 3)
        {
            cantidadEmoji = 16;
        }
    }

    
    private void InicioJuego()
    {
        cambio = true;
        Random random = new Random();

        if (EstiloIndexSelect != 0)
        {
           
            if (DificultadIndexSelect == 1 && EstiloIndexSelect == 1)
            {
                mezclarEmoji = Emoji_4X3.OrderBy(item => random.Next()).ToList();
            }

            if (DificultadIndexSelect == 2 && EstiloIndexSelect == 1)
            {
                mezclarEmoji = Emoji_4X5.OrderBy(item => random.Next()).ToList();
            }

            if (DificultadIndexSelect == 3 && EstiloIndexSelect == 1)
            {
                mezclarEmoji = Emoji_4X8.OrderBy(item => random.Next()).ToList();
            }
        }

        parejasEncontradas = 0;
        decimasSegundos = 0;
        CantidadEmoji();
    }

    string ultimoEmoji = string.Empty;
    string ultimaDescripcion = string.Empty;

   
    private void ButtonClick(string emoji, string emojiDescripcion)
    {
        if (JugadorTextBox == string.Empty)
        {
            Toast.ShowError("Asignarle un nombre de jugador.");
            return;
        }

        if (ultimoEmoji == string.Empty)
        {
            // First selection of the pair. Remember it.
            ultimoEmoji = emoji;
            ultimaDescripcion = emojiDescripcion;

            timer.Start();
        }
        else if ((ultimoEmoji == emoji) && (emojiDescripcion != ultimaDescripcion))
        {
            // Match found! Reset for next pair.
            ultimoEmoji = string.Empty;

            // Replace found animals with empty string to hide them.
            mezclarEmoji = mezclarEmoji.Select(a => a.Replace(emoji, string.Empty)).ToList();

            parejasEncontradas++;
            if (parejasEncontradas == cantidadEmoji) //6 - 10 - 16
            {
                timer.Stop();

                //ProyectoFinalAP2.Models.MatchGame game = new ProyectoFinalAP2.Models.MatchGame();
                //game.Jugador = JugadorTextBox;
                //game.Dificultad = DificultadIndexSelect.ToString();
                //game.TimeDisplay = timeDisplay;

                //BLL.MatchGameBLL.Guardar(game);

                mensaje = "Toca un Emoji para volver a Jugar.";
                InicioJuego();
                
            }
        }
        else
        {
            
            ultimoEmoji = string.Empty;
        }
    }
    
    

    private void RegistrarResultadosButtonClick()
    {
        ProyectoFinalAP2.Models.MatchGame game = new ProyectoFinalAP2.Models.MatchGame();

        if (JugadorTextBox == string.Empty)
        {
            Toast.ShowError("Para Registrar este resultado, debes asignarle un nombre al jugador");
            return;
        }

        if (cambio == false)
        {
            Toast.ShowError("Para Registrar otro resultado, debes iniciar nuevamente el juego.");
            return;
        }

        else
        {
            game.Jugador = JugadorTextBox;
            game.Dificultad = DificultadIndexSelect.ToString();
            game.Estilo = EstiloIndexSelect.ToString();
            game.TimeDisplay = timeDisplay;

            MatchGameBLL.Guardar(game);
            

            Toast.ShowSuccess("Resultados registrados exitosamente.");
            
        }

    }

    

    
    private void Temporizador(Object source, ElapsedEventArgs e)
    {
        mensaje = string.Empty;
        InvokeAsync(() =>
        {
            decimasSegundos++;
            timeDisplay = (decimasSegundos / 10F).ToString("0.0s");
            StateHasChanged();
        });
    }

    #region

    List<string> Emoji_4X3 = new List<string>()
{
        
        "🐶","🐶",
        "🐺","🐺",
        "🐮","🐮",
        "🦊","🦊",
        "🐱","🐱",
        "🦁","🦁",
    };

    List<string> Emoji_4X5 = new List<string>()
{
        "🐶","🐶",
        "🐺","🐺",
        "🐮","🐮",
        "🦊","🦊",
        "🐱","🐱",
        "🦁","🦁",
        "🐯","🐯",
        "🐹","🐹",
        "🐸","🐸",
        "🐴","🐴",
    };

    List<string> Emoji_4X8 = new List<string>()
{
        "🐶","🐶",
        "🐺","🐺",
        "🐮","🐮",
        "🦊","🦊",
        "🐱","🐱",
        "🦁","🦁",
        "🐯","🐯",
        "🐹","🐹",
        "🐸","🐸",
        "🐴","🐴",
        "🦁","🦁",
        "🐼","🐼",
        "🦉","🦉",
        "🦅","🦅",
        "🐤","🐤",
        "🐦","🐦",
    };   
    #endregion
}
